= Target Platforms =

== 64 Bit ==
Recent Linux and Windows users tend to have 64-bit-only versions of Java, so they need
the 64 bit products.

Oracle Java 7 for Mac OS X is 64 bit.

== Mac OS X ==
Started out with {{{os=macosx, ws=carbon, arch=x86}}} for Mac OS X 10.5 and 10.6.

Then switched to {{{ws=cocoa}}}.

Eventually, CSS source code updates required Java 7.
The Eclipse 3.7.2 target launcher, however, does not work with Oracle Java 7.
Options {{{-vm /path/to/jdk1.7/bin/java}}} have no effect.

Need to start CSS like this:
{{{
java -showversion -XX:MaxPermSize=256m -Xms1024m -Xmx1024m -XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts -Xdock:icon=css.app/Contents/Resources/css.icns -Dosgi.requiredJavaVersion=1.7 -jar plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar
}}}

See also http://stackoverflow.com/questions/10352715/how-do-i-run-eclipse-using-oracles-new-1-7-jdk-for-the-mac

Before Eclipse 4.3, support for the new Oracle/Open JDK layout also requires manual creation of (empty) Classes directory:
{{{
sudo mkdir /Library/Java/JavaVirtualMachines/jdk1.7.0_17.jdk/Contents/Home/Classes
}}}

== Update from P2 Repository ==
When supporting self-updates from a P2 repository, assert that products will not attempt to update
from for example {{{os=macosx, ws=carbon}}} to {{{ws=cocoa}}}.
The result would be:

 1. Update, running on {{{ws=carbon}}}, removes/disables the old carbon artefacts.
 2. Update then refuses to install the new {{{ws=cocoa}}} artefacts, because it's running as {{{ws=carbon}}}, so the update does not apply.
 3. Result is a defunct setup.


To guard against this, add specific filters to the product plugin, for example 
{{{(| (osgi.ws=win32)(osgi.ws=cocoa)(osgi.ws=gtk))}}}
which prevent installation of this 'latest' product into an existing {{{ws=carbon}}} setup.

Users will have to download the new product ZIP file, they cannot use self-update.
