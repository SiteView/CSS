/*
 * Copyright (c) 2011 Stiftung Deutsches Elektronen-Synchrotron,
 * Member of the Helmholtz Association, (DESY), HAMBURG, GERMANY.
 *
 * THIS SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN "../AS IS" BASIS.
 * WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE. SHOULD THE SOFTWARE PROVE DEFECTIVE
 * IN ANY RESPECT, THE USER ASSUMES THE COST OF ANY NECESSARY SERVICING, REPAIR OR
 * CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE.
 * NO USE OF ANY SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.
 * DESY HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
 * OR MODIFICATIONS.
 * THE FULL LICENSE SPECIFYING FOR THE SOFTWARE THE REDISTRIBUTION, MODIFICATION,
 * USAGE AND OTHER RIGHTS AND OBLIGATIONS IS INCLUDED WITH THE DISTRIBUTION OF THIS
 * PROJECT IN THE FILE LICENSE.HTML. IF THE LICENSE IS NOT INCLUDED YOU MAY FIND A COPY
 * AT HTTP://WWW.DESY.DE/LEGAL/LICENSE.HTM
 */
package org.csstudio.common.trendplotter.model;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Nonnull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * TODO (jhatje) :
 *
 * @author jhatje
 * @since 12.09.2011
 */
public class LiveSamplesCompression {

    private static final Logger LOG = LoggerFactory.getLogger(LiveSamplesCompression.class);

    /**
     * List of live samples received from control system
     */
    private List<PlotSample> _liveSamples;

    /**
     * Interval in seconds to compress (keep min and max value) in level 1
     */
    private int _compressionInterval1 = 30;

    /**
     * Interval in seconds to compress (keep min and max value) in level 2
     */
    private int _compressionInterval2 = 600;

    /**
     * Compression level 1 starts from this index
     */
    private int _sampleNumberLevel1 = 100;

    /**
     * Compression level 2 starts from this index
     */
    private int _sampleNumberLevel2 = 700;

    /**
     * Number live samples before compression starts.
     */
    private int _base = 1500;

    /**
     * Number of new live samples before next compression starts
     */
    private int _range = 200;

    /**
     * List of samples that should be removed after compression
     */
    private final List<PlotSample> _samplesToRemove = new ArrayList<PlotSample>();

    /**
     * Index in liveSample list. All later samples are not yet compressed. All older samples
     * are compressed with level 1
     */
    private int _markerLevel1 = 0;

    /**
     * Index in liveSample list. Last sample to compress in next with level 2 compression.
     */
    private int _markerLevel2 = 0;

    /**
     * Index in liveSample list. From first (oldest) sample to this marker live sample list
     * is compressed with level 2
     */
    private int _markerLevel3 = 0;

    /**
     * Compress number of samples.
     * @param samples
     */
    public void compressSamples() {
        if (_liveSamples.size() < _base + _markerLevel3 + _range) {
            return;
        }

        System.out.println("--------- live sample size: " + _liveSamples.size());
        System.out.println("------ markerLevel1: " + _markerLevel1);
        System.out.println("------ markerLevel2: " + _markerLevel2);
        System.out.println("------ markerLevel3: " + _markerLevel3);
        System.out.println("------ start compression ");
        handleInterval(_markerLevel1, _liveSamples.size() - _sampleNumberLevel1, _compressionInterval1);

        for (final PlotSample sample : _samplesToRemove) {
            System.out.println("-removeList sampletime: " + sample.getTime().seconds() +
                               " value: " + sample.getYValue());
        }

        _liveSamples.removeAll(_samplesToRemove);
        _samplesToRemove.clear();

        handleInterval(_markerLevel3, _markerLevel2, _compressionInterval2);
        if (_markerLevel2-_samplesToRemove.size() > 0) {
            _markerLevel3 = _markerLevel2-_samplesToRemove.size();
        }
        for (final PlotSample sample : _samplesToRemove) {
            System.out.println("-removeList sampletime: " + sample.getTime().seconds() +
                               " value: " + sample.getYValue());
        }

        _liveSamples.removeAll(_samplesToRemove);
        _samplesToRemove.clear();

        if (_liveSamples.size() > _sampleNumberLevel1) {
            _markerLevel1 = _liveSamples.size() - _sampleNumberLevel1;
        }

        if (_liveSamples.size() > _sampleNumberLevel2) {
            _markerLevel2 = _liveSamples.size() - _sampleNumberLevel2;
        }

        System.out.println("------ markerLevel1: " + _markerLevel1);
        System.out.println("------ markerLevel2: " + _markerLevel2);
        System.out.println("------ markerLevel3: " + _markerLevel3);
        System.out.println("-------live sample sizte: " + _liveSamples.size());
        int i = 0;
        for (final PlotSample sample : _liveSamples) {
            i++;
            System.out.println("- listEndsample " + i + " time: " + sample.getTime().seconds() +
                               " value: " + sample.getYValue());
        }
        System.out.println("------ end compress");
    }

    /**
     *
     */
    private void handleInterval(final int marker, final int endIndex, final int interval) {
        PlotSample currentSample;
        System.out.println("-- marker: " + marker + " endIndex: " + endIndex + " interval: " + interval);
        PlotSample minSample = _liveSamples.get(endIndex);
        PlotSample maxSample = _liveSamples.get(endIndex);
        long timeStampSec = _liveSamples.get(endIndex).getTime().seconds();

        //iterate from end of liveSamples to marker index
        for (int i = endIndex - 1; i > marker; i--) {
            currentSample = _liveSamples.get(i);
            System.out.println("-- index: " + i + " currentSampleTime: " + currentSample.getTime().seconds()
                               + " curSampVal: " + currentSample.getYValue());

            //compare timestamp if sample is inside of interval
            if (timeStampSec - interval < currentSample.getTime().seconds()) {
                //update min / max if necessary and add that is not min/max sample to remove list
                if (currentSample.getYValue() < minSample.getYValue()) {
                    System.out.println("-- current y is smaller -> new min");
                    //Beim ersten Durchlauf ist min=max sample und darf daher noch nicht zu samples
                    //to remove hinzugefuegt werden.
                    if (minSample != maxSample) {
                        System.out.println("-- add old min to remove, time: " + minSample.getTime().seconds() +
                                           " value : " + minSample.getYValue());
                        _samplesToRemove.add(minSample);
                    }
                    minSample = currentSample;
                } else if (currentSample.getYValue() > maxSample.getYValue()) {
                    System.out.println("-- current y is greater -> new max");
                    //Beim ersten Durchlauf ist min=max sample und darf daher noch nicht zu samples
                    //to remove hinzugefuegt werden.
                    if (minSample != maxSample) {
                        System.out.println("-- add old max to remove, time: " + maxSample.getTime().seconds() +
                                           " value : " + maxSample.getYValue());
                        _samplesToRemove.add(maxSample);
                    }
                    maxSample = currentSample;
                } else {
                    System.out.println("-- current y is in range");
                    System.out.println("-- add cur to remove, time: " + currentSample.getTime().seconds() +
                                       " value : " + currentSample.getYValue());
                    _samplesToRemove.add(currentSample);
                }
                //timestamp of current sample is outside of interval-> reset min/max
            } else {
                minSample = _liveSamples.get(i);
                maxSample = _liveSamples.get(i);
                timeStampSec = _liveSamples.get(i).getTime().seconds();
                System.out.println("-- new time interval, min/max sampleTime:" + _liveSamples.get(i).getTime().seconds()
                                   + " value: " + _liveSamples.get(i).getYValue());
            }
        }
    }

    public void setSampleList(@Nonnull final List<PlotSample> samples) {
        _liveSamples = samples;
    }

    public void setCompressionInterval1(@Nonnull final int compressionInterval1) {
        this._compressionInterval1 = compressionInterval1;
    }

    public void setCompressionInterval2(@Nonnull final int compressionInterval2) {
        this._compressionInterval2 = compressionInterval2;
    }

    public void setSampleNumberLevel1(@Nonnull final int sampleNumberLevel1) {
        this._sampleNumberLevel1 = sampleNumberLevel1;
    }

    public void setSampleNumberLevel2(@Nonnull final int sampleNumberLevel2) {
        this._sampleNumberLevel2 = sampleNumberLevel2;
    }

    public void setWatermark(@Nonnull final int watermark) {
        this._base = watermark;
    }

    public void setRange(@Nonnull final int range) {
        this._range = range;
    }
}
