    @Test
    public void testInputChannels() throws PersistenceException, InterruptedException {
        // create Master
        _master.setFdlAddress((short) 4711);
        _master.localSave();
        assertEquals("@Subnet", _master.getEpicsAdressString());

        // create Slave
        _slave = new Slave(_master);
        _slave.moveSortIndex((short) 815);
        _slave.localSave();
        assertEquals("@Subnet:815", _slave.getEpicsAdressString());

        /*
         * Test 1. Module on a Slave: 
         * Create Module 1, SortIndex 21
         * Create three ChannelStructure with one simple Channel per ChannelStructure
         * Channel1_1: Channel1_1,  INT16, INPUT, ANALOG
         * Channel1_2: Channel1_2, UINT16, INPUT, ANALOG
         * Channel1_3: Channel1_2,  INT8,  INPUT, ANALOG
         */
        // create Module 1
        Module module1 = new Module(_slave,"Module 1");
        module1.moveSortIndex((short) 21);
        module1.localSave();

        testModule("@Subnet:815",(short)21,0,0,0,0, module1);

        // create Channels for Module 1

        ChannelStructure structure1_1 = ChannelStructure.makeSimpleChannel(module1, INPUT);
        
        Channel Channel1_1 = structure1_1.getFirstChannel();
        Channel1_1.setDigital(false);
        Channel1_1.setName("Channel1_1");
        Channel1_1.setChannelTypeNonHibernate(DataType.INT16);
        Channel1_1.localSave();

        ChannelStructure structure1_2 = ChannelStructure.makeSimpleChannel(module1, INPUT);
        
        Channel Channel1_2 = structure1_2.getFirstChannel();
        Channel1_2.setDigital(false);
        Channel1_2.setName("Channel1_2");
        Channel1_2.setChannelTypeNonHibernate(DataType.UINT16);
        Channel1_2.localSave();

        ChannelStructure structure1_3 = ChannelStructure.makeSimpleChannel(module1, INPUT);
        
        Channel Channel1_3 = structure1_3.getFirstChannel();
        Channel1_3.setDigital(false);
        Channel1_3.setName("Channel1_3");
        Channel1_3.setChannelTypeNonHibernate(DataType.INT8);
        Channel1_3.localSave();

        testModule("@Subnet:815",(short)21,0,5,0,0, module1);

        testSimpleChannel("@Subnet:815/0 'T=INT16'", (short)0, Channel1_1, structure1_1);
        testSimpleChannel("@Subnet:815/2 'T=UINT16'", (short)1, Channel1_2, structure1_2);
        testSimpleChannel("@Subnet:815/4 'T=INT8'", (short)2, Channel1_3, structure1_3);

        /*
         * Test 2. Module on a Slave: 
         * Create Module 2, SortIndex 22
         * Create three ChannelStructure with one simple Channel per ChannelStructure
         * Channel2_1: Channel2_1, UINT8,  INPUT, ANALOG
         * Channel2_2: Channel2_2,  INT16, INPUT, ANALOG
         * Channel2_3: Channel2_2, UINT16, INPUT, ANALOG
         */
        
        // create Module 2
        Module module2 = new Module(_slave, "Module 2");
        module2.moveSortIndex((short) 22);
        module2.localSave();

        testModule("@Subnet:815",(short)22,5,0,0,0, module2);
        
        // create Channels for Module 2

        ChannelStructure structure2_1 = ChannelStructure.makeSimpleChannel(module2, INPUT);
        
        Channel Channel2_1 = structure2_1.getFirstChannel();
        Channel2_1.setDigital(false);
        Channel2_1.setName("Channel2_1");
        Channel2_1.setChannelTypeNonHibernate(DataType.UINT8);
        Channel2_1.localSave();

        ChannelStructure structure2_2 = ChannelStructure.makeSimpleChannel(module2, INPUT);
        
        Channel Channel2_2 = structure2_2.getFirstChannel();
        Channel2_2.setDigital(false);
        Channel2_2.setName("Channel2_2");
        Channel2_2.setChannelTypeNonHibernate(DataType.INT16);
        Channel2_2.localSave();

        ChannelStructure structure2_3 = ChannelStructure.makeSimpleChannel(module2, INPUT);
        
        Channel Channel2_3 = structure2_3.getFirstChannel();
        Channel2_3.setDigital(false);
        Channel2_3.setName("Channel2_3");
        Channel2_3.setChannelTypeNonHibernate(DataType.UINT16);
        Channel2_3.localSave();

        testModule("@Subnet:815",(short)22,5,5,0,0, module2);

        testSimpleChannel("@Subnet:815/5 'T=UINT8,L=0,H=32768'", (short)0, Channel2_1, structure2_1);
        testSimpleChannel("@Subnet:815/6 'T=INT16'", (short)1, Channel2_2, structure2_2);
        testSimpleChannel("@Subnet:815/8 'T=UINT16'", (short)2, Channel2_3, structure2_3);

        /*
         * Test 3. Module on a Slave: 
         * Create Module 3, SortIndex 23
         * Create three ChannelStructure with one simple Channel per ChannelStructure
         * Channel3_1: Channel3_1, UINT8,  INPUT, ANALOG
         * Channel3_2: Channel3_2,  INT16, INPUT, ANALOG
         * Channel3_3: Channel3_2, UINT16, INPUT, ANALOG
         */

        // create Module 3
        Module module3 = new Module(_slave, "Module 3");
        module3.moveSortIndex((short) 23);
        module3.localSave();

        testModule("@Subnet:815",(short)23,10,0,0,0, module3);
        
        // create Channels for Module 3
        ChannelStructure structure3_1 = ChannelStructure.makeSimpleChannel(module3, INPUT);
        
        Channel Channel3_1 = structure3_1.getFirstChannel();
        Channel3_1.setDigital(false);
        Channel3_1.setName("Channel3_1");
        Channel3_1.setChannelTypeNonHibernate(DataType.UINT8);
        Channel3_1.localSave();

        ChannelStructure structure3_2 = ChannelStructure.makeSimpleChannel(module3, INPUT);
        
        Channel Channel3_2 = structure3_2.getFirstChannel();
        Channel3_2.setDigital(false);
        Channel3_2.setName("Channel3_2");
        Channel3_2.setChannelTypeNonHibernate(DataType.INT16);
        Channel3_2.localSave();

        ChannelStructure structure3_3 = ChannelStructure.makeSimpleChannel(module3, INPUT);
        
        Channel Channel3_3 = structure3_3.getFirstChannel();
        Channel3_3.setDigital(false);
        Channel3_3.setName("Channel3_3");
        Channel3_3.setChannelTypeNonHibernate(DataType.UINT16);
        Channel3_3.localSave();

        testModule("@Subnet:815",(short)23,10,5,0,0, module3);
        
        testSimpleChannel("@Subnet:815/10 'T=UINT8,L=0,H=32768'", (short)0, Channel3_1, structure3_1);
        testSimpleChannel("@Subnet:815/11 'T=INT16'", (short)1, Channel3_2, structure3_2);
        testSimpleChannel("@Subnet:815/13 'T=UINT16'", (short)2, Channel3_3, structure3_3);

        // 
        Channel2_1.setChannelTypeNonHibernate(DataType.INT16);
        Channel2_1.localSave();
        testSimpleChannel("@Subnet:815/5 'T=INT16'", (short)0, Channel2_1, structure2_1);
        testSimpleChannel("@Subnet:815/7 'T=INT16'", (short)1, Channel2_2, structure2_2);
        testSimpleChannel("@Subnet:815/9 'T=UINT16'", (short)2, Channel2_3, structure2_3);

        testSimpleChannel("@Subnet:815/11 'T=UINT8,L=0,H=32768'", (short)0, Channel3_1, structure3_1);
        testSimpleChannel("@Subnet:815/12 'T=INT16'", (short)1, Channel3_2, structure3_2);
        testSimpleChannel("@Subnet:815/14 'T=UINT16'", (short)2, Channel3_3, structure3_3);
    }